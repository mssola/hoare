#!/usr/bin/perl -w
# Copyright (C) 2014 Miquel Sabaté Solà <mikisabate@gmail.com>
# This file is licensed under the MIT license.
# See the LICENSE file.

use strict;
use File::Basename;
use Cwd 'abs_path', 'getcwd';


##
# Config values.

# The base path that this script will use. By default it picks the root of the
# project.
my $base = '..';

# The build directory relative to the $base path.
my $build = 'build';

# The name of the executable file.
my $exe = 'hoare';


# First of all, compile the executable file.
print "Compiling the `hoare` executable file again.\n";
chdir "$base/$build";
if (-f $exe) {
    `rm $exe`;
}
my $make = 'make';
if (-f 'rules.ninja') {
    $make = 'ninja';
}
`cmake .. && $make`;
if (-f "$base/$build/$exe") {
    print "Build was successful.\n";
} else {
    print "Could not compile the `hoare` executable file.\n";
    exit 1;
}

# Auxiliar thingies.
my $files = "$base/test/files";
my $expected = "$base/test/expected";
my @oks = ();
my @fails = ();

# And finally execute the tests.
opendir(DIR, "$base/test/files") or die $!;
while (my $file = readdir(DIR)) {
    # Ignore hidden files and strip the extension.
    next if ($file =~ m/^\./);
    my $name = $file;
    $name =~ s/\.hoare//;

    # If the tests starts with `error_` it means that we are checking for a
    # compile error. In this case we want to redirect to output to a specific
    # file. Otherwise, we'll just compare the .ll file with the expected result.
    my $out = '';
    if ($name =~ /^error_/) {
        `./$exe -S $files/$file > test.txt`;
        $out = `diff test.txt $expected/$name.txt`;
        `rm test.txt`;
    } else {
        `./$exe -S $files/$file`;
        $out = `diff $base/test/files/$name.ll $expected/$name.txt`;
        `rm $base/test/files/$name.ll`;
    }

    # If the diff gave no output, then it's fine.
    if ($out eq '') {
        print "$name: OK\n";
        push(@oks, $name);
    } else {
        print "$name: FAIL!\n";
        print "$out";
        push(@fails, $name);
    }
}
closedir(DIR);

print "Oks: " . @oks . " Fails: " . @fails . "\n";
if (@fails > 0) {
    exit(1);
}
exit(0);

